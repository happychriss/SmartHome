var Timer tRandomLights = null
var Number NightActive = 0


rule "DASH Nerf"
when
    Item Dash_Nerf received update ON
then
    logInfo("amazondashbutton", "My Dash *Alarm On* has been pressed")
    if(AbsenceMode.state == ON)
    {
            sendCommand(AbsenceMode,OFF)
    }
    else {
            sendCommand(AbsenceMode,ON)
			sendCommand(FRITZDECT3011Arbeitszimmer_RadiatorMode,'OFF')
    }
end

rule "SetNight"
when
    Channel 'astro:sun:home:night#event' triggered START
then
    logInfo("absense_rule", "Astro - Sun Down")    
    NightActive=1
end


rule "Absence Alarm ON"
when
    Item AbsenceMode received update
then
  if(AbsenceMode.state == ON)
  {
	logInfo("absense_rule", "Alarm Mode was enabled")    
	Lights_Random.members.forEach [s | logInfo("absense_rule", s.name + " equals " + s.state.toString)]
	sendCommand(Ambient_Kueche_Toggle,ON)
	tRandomLights = createTimer(now.plusSeconds(10)) [|
		sendCommand(Ambient_Kueche_Toggle,OFF)
	]
  }
  else {
	logInfo("absense_rule", "Alarm Mode was disabled")    
	sendCommand(Lights,OFF)
	sendCommand(Ambient_Kueche_Toggle,ON)

  }
end

rule "Randomly turn on & off lights between 07.00-23.00 if before or after sunset and if alarm is activated"
when
	Time cron "0 */10 7-23 * * ?"
then
    logInfo("absense_rule", "chron triggered")        
	if (AbsenceMode.state == ON) {
        if (NightActive==1) {
            logInfo("absense_rule", "Absence - Random Light Setting Active")    
		    // Only turn a light on/off ocasionally
	 	    if ((new java.util.Random).nextInt(2) == 1) { 
	 		    // Create a timer with a random value
			    var int randomTime = (new java.util.Random).nextInt(300)
			    logInfo("org.openhab","Setting random lights timer to " + randomTime + " seconds.")
			    tRandomLights = createTimer(now.plusSeconds(randomTime)) [|
				    var randLightIndex = (new java.util.Random).nextInt(Lights_Random.members.size)
		 		    var randLightStateCurrent = Lights_Random.members.get(randLightIndex).state
		 		    var randLightStateNew = if (randLightStateCurrent == ON) OFF else ON
		 		    logInfo("org.openhab","Switching light " + Lights_Random.members.get(randLightIndex).name + " from " + randLightStateCurrent + " to " + randLightStateNew)
		 		    sendCommand(Lights_Random.members.get(randLightIndex), randLightStateNew)
		        ]
			}
		}
    }
end

rule "Turn all lights off at 23.10 if alarm is activated"
when
	Time cron "0 10 23 * * ?"
then
	if (AbsenceMode.state == ON) {
	 	logInfo("org.openhab","Turning all the random lights off.")
	 	sendCommand(Lights_Random, OFF)
        NightActive=0
	}
end
